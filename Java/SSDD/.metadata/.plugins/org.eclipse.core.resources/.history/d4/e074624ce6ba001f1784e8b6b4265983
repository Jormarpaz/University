package es.uned.servidor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import es.uned.repositorio.*;
import es.uned.servidor.*;

public class ServicioAutenticacionImpl implements ServicioAutenticacionInterface{
	
	private ServicioDatosInterface datos;
	
	protected ServicioAutenticacionImpl(ServicioDatosInterface datos) {
		this.datos = datos;
	}
	
	@Override
	public int registrarCliente(String nombre, String contraseña) {
		if (datos.nombre_sesion.containsKey(nombre)) {
	        return 0;
	    }
	    int sesionUsuario = getSesion();
	    sesion_nombre.put(sesionUsuario, nombre);
	    nombre_sesion.put(nombre, sesionUsuario);
	    nombre_contraseña.put(nombre, contraseña);
	    asignarClienteARepositorio(nombre);
	    return sesionUsuario;
	}
	
	@Override
	public int autenticarCliente(String nombre, String contraseña) {
		if (nombre_contraseña.containsKey(nombre) && nombre_contraseña.get(nombre).equals(contraseña)) {
	        return nombre_sesion.get(nombre);
	    }
	    return 0;
	}
	
	@Override
	public int registrarRepositorio(ServicioSrOperadorInterface srOperador) {
	    int idRepositorio = getSesion(); // Genera un ID único
	    repositorio_clientes.put(idRepositorio, new ArrayList<>()); // Inicializa la lista de clientes asignados
	    repositorios.put(idRepositorio, srOperador); // Almacena la referencia al servicio remoto del repositorio
	    System.out.println("Repositorio registrado con ID: " + idRepositorio);
	    return idRepositorio; // Devuelve el ID único
	}
	
	@Override
	public boolean autenticarRepositorio(int idRepositorio) {
	    return repositorio_clientes.containsKey(idRepositorio); // Verifica si el ID es válido
	}
	
	
	private void asignarClienteARepositorio(String nombreCliente) {
	    int idRepositorio = asignarRepositorio(); // Selecciona el repositorio disponible
	    repositorio_clientes.computeIfAbsent(idRepositorio, k -> new ArrayList<>()).add(nombreCliente);
	}
	
	
	private int asignarRepositorio() {
	    int idRepositorioConMenosClientes = -1;
	    int menorCantidadClientes = Integer.MAX_VALUE;

	    for (Map.Entry<Integer, List<String>> entry : repositorio_clientes.entrySet()) {
	        if (entry.getValue().size() < menorCantidadClientes) {
	            menorCantidadClientes = entry.getValue().size();
	            idRepositorioConMenosClientes = entry.getKey();
	        }
	    }

	    return idRepositorioConMenosClientes;
	}

	private static int sesion = new Random().nextInt();
	
	public static int getSesion() {
		return ++sesion;
	}
	
}
