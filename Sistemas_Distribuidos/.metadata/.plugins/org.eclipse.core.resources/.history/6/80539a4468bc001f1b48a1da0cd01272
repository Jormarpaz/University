package es.uned.cliente;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class ServicioDiscoClienteImpl implements ServicioDiscoClienteInterface {
	
	// Método para subir un archivo
	@Override
	public boolean subirArchivo(String url, String nombreArchivo, byte[] contenido) {
	    // Construye la ruta completa para guardar el archivo
	    File file = new File(url + "/" + nombreArchivo);

	    try {
	        // Verifica si el directorio donde se va a guardar el archivo existe, si no, lo crea
	        Path path = file.getParentFile().toPath();
	        if (!Files.exists(path)) {
	            Files.createDirectories(path); // Crea las carpetas necesarias
	        }

	        // Escribe el contenido en el archivo
	        Files.write(file.toPath(), contenido);
	        System.out.println("Archivo subido con éxito a " + file.getAbsolutePath());
	        return true;
	    } catch (IOException e) {
	        System.out.println("Error al subir el archivo: " + e.getMessage());
	        return false;
	    }
	}


	// Método para descargar un archivo
	@Override
	public byte[] descargarArchivo(String url, String nombreArchivo) {
	    // Construye la ruta completa del archivo a leer
	    File file = new File(url + "/" + nombreArchivo);

	    try {
	        if (file.exists()) {
	            // Lee el contenido del archivo y lo retorna como un array de bytes
	            System.out.println("Descargando archivo desde: " + file.getAbsolutePath());
	            return Files.readAllBytes(file.toPath());
	        } else {
	            System.out.println("El archivo no existe en la ruta: " + file.getAbsolutePath());
	            return null;
	        }
	    } catch (IOException e) {
	        System.out.println("Error al descargar el archivo: " + e.getMessage());
	        return null;
	    }
	}

    
}


